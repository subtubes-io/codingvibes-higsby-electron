/**
 * Extension System Types
 * Defines the interfaces and types for the dynamic extension system
 */

// Port system types
export type PortCategory = 'string' | 'number' | 'boolean' | 'JSON';
export type PortType = 'input' | 'output';

export interface PortDefinition {
    name: string;
    category: PortCategory;
    description?: string;
    required?: boolean; // Default: false
}

export interface PortInstance {
    id: string; // UUID generated by app
    type: PortType;
    category: PortCategory;
    name: string;
    nodeId: string;
    edges: string[]; // UUIDs of connected edges
    description?: string;
}

export interface ExtensionManifest {
    /** Unique name of the extension */
    name: string;
    /** Component name used for folder and loading */
    componentName: string;
    /** Semantic version of the extension */
    version: string;
    /** Short description of what the extension does */
    description: string;
    /** Extension author information */
    author: string;
    /** Main entry point file (relative to extension root) */
    main: string;
    /** Required dependencies (optional) */
    dependencies?: string[];
    /** Required permissions (optional) */
    permissions?: string[];
    /** Minimum app version required */
    minAppVersion?: string;
    /** Extension icon path (optional) */
    icon?: string;
    /** Extension tags/categories */
    tags?: string[];
    /** Default dimensions for the node when first added */
    dimensions?: {
        width: number;
        height: number;
    };
    /** Port configuration for the extension */
    ports?: {
        inputs?: PortDefinition[];
        outputs?: PortDefinition[];
    };
}

export interface Extension {
    /** Unique identifier for the extension */
    id: string;
    /** Extension manifest data */
    manifest: ExtensionManifest;
    /** Whether the extension is currently enabled */
    isEnabled: boolean;
    /** Whether the extension component is loaded */
    isLoaded: boolean;
    /** File system path to the extension */
    path: string;
    /** Loaded React component (if loaded) */
    component?: React.ComponentType<any>;
    /** Installation timestamp */
    installedAt: Date;
    /** Last update timestamp */
    updatedAt: Date;
    /** Extension status */
    status: ExtensionStatus;
    /** Error message if status is error */
    errorMessage?: string;
}

export enum ExtensionStatus {
    INSTALLED = 'installed',
    ENABLED = 'enabled',
    DISABLED = 'disabled',
    ERROR = 'error',
    LOADING = 'loading'
}

export interface ExtensionUploadResult {
    success: boolean;
    extension?: Extension;
    extensionId?: string;
    message?: string;
    error?: string;
}

export interface ExtensionRegistry {
    [extensionId: string]: Extension;
}

export interface UploadProgress {
    fileName: string;
    progress: number;
    status: 'uploading' | 'extracting' | 'validating' | 'installing' | 'complete' | 'error';
    error?: string;
}

// Graph serialization types
export interface SerializedNode {
    id: string;
    name: string;
    type: string;
    extension: string;
    position: { x: number; y: number };
    size?: { width: number; height: number };
    plugin?: ExtensionManifest;
    inputPorts: string[]; // UUIDs
    outputPorts: string[]; // UUIDs
}

export interface SerializedGraph {
    version: string;
    metadata: {
        name: string;
        description: string;
        exportedAt: string;
        zoom: number;
        panOffset: { x: number; y: number };
    };
    nodes: Record<string, SerializedNode>;
    ports: Record<string, PortInstance>;
    edges: Record<string, any>; // Define edge structure as needed
}
